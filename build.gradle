apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/"}
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.0'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {url "https://mvn.intellectualsites.com/content/repositories/snapshots/"}
    maven {url "https://mvn.intellectualsites.com/content/repositories/releases/"}
    maven { url = "https://maven.enginehub.org/repo/"}
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/"}
    maven {url "http://nexus.hc.to/content/repositories/pub_releases"}
    maven { url = "https://repo.codemc.org/repository/maven-public" }
    maven {url "https://hub.spigotmc.org/nexus/content/groups/public/"}
    maven { url 'https://jitpack.io' }
    maven {url "https://repo.spongepowered.org/maven"}
}

dependencies {
    compile 'org.ajoberstar:grgit:1.7.0'
    compile 'org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT'
    compile 'com.sk89q.worldedit:worldedit-bukkit:6.1.4-SNAPSHOT'
    compile 'com.sk89q.worldedit:worldedit-core:6.1.4-SNAPSHOT'
    compile 'com.github.intellectualsites.plotsquared:PlotSquared-API:3'
}

def revision = ""
def buildNumber = ""
def semver = ""
def date = ""
ext {
    git = org.ajoberstar.grgit.Grgit.open(file(".git"))
    date = git.head().date.format("yy.MM.dd")
    revision = "-${git.head().abbreviatedId}"
    parents = git.head().parentIds;
    index = 0;  // Offset to mach CI
    int major, minor, patch;
    major = minor = patch = 0;
    for (;parents != null && !parents.isEmpty();index++) {
        int majorCount, minorCount, patchCount;
        patchCount = minor == 0 && major == 0 ? 1 : 0;
        commit = git.getResolve().toCommit(parents.get(0));
        for (String line : commit.fullMessage.tokenize("\n")) {
            switch (line.replaceAll("- ", "").split(" ")[0].toLowerCase()) {
                case "minor":
                case "added":
                case "add":
                case "change":
                case "changed":
                case "changes":
                    if (major == 0) {minorCount = 1; patchCount = 0;}
                    break;
                case "refactor":
                case "remove":
                case "major":
                    patchCount = minorCount = 0;
                    majorCount = 1;
                    break;
            }
        }
        major += majorCount;
        minor += minorCount;
        patch += patchCount;
        parents = commit.getParentIds()
    }
    buildNumber = "-${index}"
    semver = "-${major}.${minor}.${patch}"
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

version = date + revision + buildNumber + semver
if ( project.hasProperty("lzNoVersion") ) { // gradle build -PlzNoVersion
    version = "unknown";
}
description = rootProject.name

sourceCompatibility = 1.8
targetCompatibility = 1.8

clean{
    delete file("target")
}

processResources {
    from('src/main/resources') {
        include 'plugin.yml'
        expand(
            name: project.name,
            version: project.version
        )
    }
}
jar {
    enabled = true
    archiveName = "${rootProject.name}-${project.version}.jar"
    destinationDir = file 'target'
}
println sourceSets.main.output.classesDir
